@import "./vars.scss";
@import "./math.scss";

@mixin spokes($rad, $size, $item) {
  .#{$item} {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    width: $size;
    height: $size;

    margin: (-$size/2) 0 0 (-$size/2);

    font-family: $headingFont;
    font-weight: 600;
    color: $K800;

    @for $i from 0 through 11 {
      &-#{$i} {
        top: percentage(0.5 - ((cos($i * 30deg)) * $rad));
        left: percentage(0.5 + ((sin($i * 30deg)) * $rad));
      }
    }
  }
}

$wheel-width: 320px;
$wheel-breakpoint: $wheel-width + $layout-side-padding * 2;
$wheel-width-mobile: calc(100vw - #{$layout-side-padding * 2});

// Wheel wrap (overflow allowed for box-shadow
.wheel-wrap {
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: center;
  margin-top: 10px;

  width: $wheel-width;
  height: $wheel-width;

  @media (max-width: $wheel-breakpoint) {
    width: $wheel-width-mobile;
    height: $wheel-width-mobile;
  }

  // Background
  .wheel-background {
    position: absolute;
    z-index: 1;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;

    border-radius: 50%;
    background: $K200;
    box-shadow: 1px 2px 8px rgba($K500, 0.1), 2px 4px 28px rgba($K400, 0.1);

    &:before {
      $rad: 32%;
      content: "";
      position: absolute;
      top: 50 - $rad;
      left: 50 - $rad;
      width: $rad * 2;
      height: $rad * 2;

      border-radius: 50%;
      background: white;
      box-shadow: inset 1px 2px 10px rgba($K500, 0.2),
        inset 2px 4px 28px rgba($K400, 0.2);
    }
  }
}

// Wheel itself (overflow: hidden)
.wheel {
  position: relative;
  z-index: 2;
  width: 100%;
  height: 100%;
  overflow: hidden;

  @media (max-width: $wheel-breakpoint) {
    width: $wheel-width-mobile;
    height: $wheel-width-mobile;
  }

  // Notes
  @include spokes(0.41, 60px, "note");
  .note {
    user-select: none;
    pointer-events: none;
    z-index: 4;
    transition: 0.2s ease color;

    span {
      display: flex;
      flex-direction: row;

      font-size: 26px;

      span:nth-child(2) {
        font-size: 16px;
      }

      @media (max-width: $wheel-breakpoint) {
        font-size: 7.5vw;

        span:nth-child(2) {
          font-size: 5vw;
        }
      }

      &.flat span:nth-child(2) {
        margin-top: 11px;
      }
      &.sharp span:nth-child(2) {
        margin-top: 4px;
      }
    }

    color: $K550;

    &.in-key {
      color: $K750;
    }
  }

  // Grades
  @include spokes(0.265, 40px, "grade");
  .grade {
    pointer-events: none;
    user-select: none;
    z-index: 3;
    font-size: 16px;

    @media (max-width: $wheel-breakpoint) {
      font-size: 5vw;
    }
  }
}

@mixin color-svg($color) {
  fill: $color;
  stroke: darken($color, 15%);

  &.current,
  &:hover {
    fill: darken($color, 15%);
    stroke: darken($color, 30%);
  }
}

// Arc
.arc-sections {
  position: absolute;
  z-index: 2;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;

  path {
    cursor: pointer;
    // transition: 0.1s ease fill;

    &.outer {
      fill: $K200;
      stroke: $K350;

      &:hover {
        fill: $K300;
      }

      &.in-key {
        fill: white;
        stroke: $K300;

        &:hover {
          fill: $K100;
        }
      }

      // Chord Type
      &.current.type-major {
        @include color-svg($major-color);
      }
      &.current.type-minor {
        @include color-svg($minor-color);
      }
    }
    &.inner {
      fill: rgba($K600, 0.1);
      stroke: $K500;

      // Chord Type
      &.type-major {
        @include color-svg($major-color);
      }
      &.type-minor {
        @include color-svg($minor-color);
      }
      &.type-diminished {
        @include color-svg($diminished-color);
      }
      &.type-augmented {
        @include color-svg($augmented-color);
      }
    }
  }
}
